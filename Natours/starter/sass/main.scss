
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
    
}

/*  setting global font size in order to use rem units and have more control over mobile breakpoints */
html {
    font-size: 62.5%;
    /*  set to % so the user can override the font size if needed */
    /* 10px / 16px = 62.5% - 10px bc it is easier to calculate the rem units in other locations */
}

/* placing font within the body tag because of inheritance */

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: $color-grey-dark;
    padding: 3rem; 
        /* a method of applying a border to the entire webpage */
    box-sizing: border-box; 
        /* borders and padding are included within the total width and height */
}

.header {
    height: 95vh;  
         /* 95% of the viewport height */
    background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.801),
        rgba($color-primary-dark, 0.795)),    
        url(../img/hero-small.jpg);
    background-size: cover;
    background-position: top;
      /* when resizing the image the bottom will crop, not the top */
    position: relative;
      /* Gives the child element (positioned absolute) a reference point to apply top, bottom, left, and right props */
    
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

}

.header__logo-box {
    position: absolute;
      /* Allows us to use top, bottom, left and right properties */
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
      /* width scales accordingly */
}

/* .logo:hover {
    animation: moveInLeft 2s ease-out;
} */

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
      /* 50% of the width of the parent element (header) */
    
    transform: translate(-50%, -50%);
      /* Not in relation to the parent element, but the element itself */

    text-align: center;
      /* this is to get the white button child to align center */

}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;

    backface-visibility: hidden;
      /* fixing the issue with the animation being jerky */
      margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 700;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 3s;
    animation-timing-function: ease-out;
    
    
    /* 
        animation-delay: 2s; 
        animation-iteration-count: 3;
        
    */

}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 400;
    letter-spacing: 1.74rem;

    animation: moveInRight 3s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}


@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }

    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

/* pseudo-element styles are used to styles elements under a special condition */
/* 'link' is a special state of a selector when the element is an anchor element */
.btn:link,
.btn:visited { 
    text-transform: uppercase;
    text-decoration: none;
      
    display: inline-block;
    /* default display is inline */
    /* display must be inline-block if you want to add width, padding, or height */

    border-radius: 10rem;

    /* animation */
    /* 'all' properties are enabled to be animated */
    /* a .2s delay is applied to the button animation */
    transition: all .2s;

    position: relative;
      /* to hide the psuedo element created for the animation */

    font-size: 1.6rem;

    
    
}

.btn:hover {
    transform: translateY(-.3rem);
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}

/* When the btn is pressed */
.btn:active {
    transform: translateY(-.1rem);
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}

.btn--white {
    background-color: $color-white;
    color: $color-grey-dark;
    padding: 1.5rem 4rem;
}

/* pseudo elements allow us to style certain parts of an element */
/* the :after adds a virtual element right after the element we're selecting */

/* adding an element that looks exactly like the button behind the button */
/*  it will appear when hovered and dissapear */
/*  the pseudo element is treated like the child of the parent element  */
.btn::after {
    content: '';
       /* required, even when there is no content */
    display: inline-block;
       /* bc the button itself is inline block */
    height: 100%;
        /* 100% of the height of the button (parent) */
    width: 100%;
    border-radius: 10rem;
    position: absolute;
        /* in order to get the pseudo element behind the button */
    top: 0;
    left: 0;
    z-index: -1;
        /* places the pseudo element direclty behind the button */

    transition: all .4s;
}

.btn-white::after {
    background-color: $color-white;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
      /* fading out, causes the pseudo element to dissapear */
}

.btn--animated {
    animation: moveInBottom .7s ease-out .75s;
    animation-fill-mode: backwards;
      /* auto applies the styles of the 0% before the animation starts  */
      /* testing */
}